<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DDD on Ninja Snacks</title><link>https://the.fringe.ninja/tags/ddd/</link><description>Recent content in DDD on Ninja Snacks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 03 Apr 2014 15:27:21 -0500</lastBuildDate><atom:link href="https://the.fringe.ninja/tags/ddd/index.xml" rel="self" type="application/rss+xml"/><item><title>Incomplete Commands</title><link>https://the.fringe.ninja/2014/04/03/incomplete-commands/</link><pubDate>Thu, 03 Apr 2014 15:27:21 -0500</pubDate><guid>https://the.fringe.ninja/2014/04/03/incomplete-commands/</guid><description>Recently a question came up in the CQRS chatroom on Jabbr:Â  Here&amp;rsquo;s the situation. New command comes in, They can sometimes be missing some info (for daft reasons), if it is missing info then I need to call off to an external api to get the info back. This external api is unreliable so it would be better to supply the information upfront if possible.
There are a couple of ways to do this.</description></item><item><title>The Electroweak Vacuum is Eventually Consistent</title><link>https://the.fringe.ninja/2013/12/18/the-electroweak-vacuum-is-eventually-consistent/</link><pubDate>Wed, 18 Dec 2013 07:24:06 +0200</pubDate><guid>https://the.fringe.ninja/2013/12/18/the-electroweak-vacuum-is-eventually-consistent/</guid><description>The fastest information can ever travel is 3*10^8 m/s - in a vacuum. It&amp;rsquo;s 2/3rds that in a copper wire. In the ideal case.
Imagine two observers in the milky way galaxy, one at Terminus and the other at Star&amp;rsquo;s End. They will observe events from all over the universe at different times - they will not agree on the order of events. What they can agree on is that eventually they will see all of them.</description></item><item><title>Value Object Only Domains</title><link>https://the.fringe.ninja/2013/10/09/value-object-only-domains/</link><pubDate>Wed, 09 Oct 2013 23:12:28 -0700</pubDate><guid>https://the.fringe.ninja/2013/10/09/value-object-only-domains/</guid><description>Word on the street is value objects have been getting the short stick in DDD ORMS. That&amp;rsquo;s too bad. Value objects should be first class citizens because like aggregates their role is to enforce invariants. e.g.
DateTime.Parse(&amp;quot;NOPE&amp;quot;) // &amp;lt;-- nope DateTime.TryParse(&amp;quot;NOPE&amp;quot;, out date) // &amp;lt;-- still nope What about something like an address? Is a part of your core domain &amp;lsquo;validate this address?&amp;rsquo; Or can you delegate to a generic domain, and implement with SmartyStreets or Melissa Data?</description></item><item><title>Trust, but Verify</title><link>https://the.fringe.ninja/2013/08/06/trust-but-verify/</link><pubDate>Tue, 06 Aug 2013 18:15:42 -0700</pubDate><guid>https://the.fringe.ninja/2013/08/06/trust-but-verify/</guid><description>Sage advice. I almost made a huge mistake this sprint, but thankfully caught it because I had one last conversation with the domain expert before I deployed anything.
As we&amp;rsquo;re using eventing / event sourcing this would have been bad as events are immutable. You can always fix bugs later but that is just more code to write which can introduce more bugs and&amp;hellip; you get the picture.
There&amp;rsquo;s a shared concept in the company, called the Packout.</description></item><item><title>Replacing Mocks with Events in Your Tests</title><link>https://the.fringe.ninja/2013/08/04/replacing-mocks-with-events-in-your-tests/</link><pubDate>Sun, 04 Aug 2013 13:20:01 -0700</pubDate><guid>https://the.fringe.ninja/2013/08/04/replacing-mocks-with-events-in-your-tests/</guid><description>Sometimes our model can&amp;rsquo;t be as pure as the driven snow. Sometimes we have to use a really crappy external model because replacing it outright would be too expensive. Typically we deal with this in our tests with some kind of mocking framework.
Example,we have a use case for &amp;lsquo;creating&amp;rsquo; an item in the ERP system. Of course in real life nothing ever gets &amp;lsquo;created.&amp;rsquo; Instead our inventory items are &amp;lsquo;created&amp;rsquo; upstream in the product development context.</description></item></channel></rss>