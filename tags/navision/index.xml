<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Navision on Ninja Snacks</title><link>https://the.fringe.ninja/tags/navision/</link><description>Recent content in Navision on Ninja Snacks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 04 Aug 2013 13:20:01 -0700</lastBuildDate><atom:link href="https://the.fringe.ninja/tags/navision/index.xml" rel="self" type="application/rss+xml"/><item><title>Replacing Mocks with Events in Your Tests</title><link>https://the.fringe.ninja/2013/08/04/replacing-mocks-with-events-in-your-tests/</link><pubDate>Sun, 04 Aug 2013 13:20:01 -0700</pubDate><guid>https://the.fringe.ninja/2013/08/04/replacing-mocks-with-events-in-your-tests/</guid><description>Sometimes our model can&amp;rsquo;t be as pure as the driven snow. Sometimes we have to use a really crappy external model because replacing it outright would be too expensive. Typically we deal with this in our tests with some kind of mocking framework.
Example,we have a use case for &amp;lsquo;creating&amp;rsquo; an item in the ERP system. Of course in real life nothing ever gets &amp;lsquo;created.&amp;rsquo; Instead our inventory items are &amp;lsquo;created&amp;rsquo; upstream in the product development context.</description></item><item><title>Unlocking the Key in Navision So We Can Apply CQRS</title><link>https://the.fringe.ninja/2013/06/23/unlocking-the-key-in-navision-so-we-can-apply-cqrs/</link><pubDate>Sun, 23 Jun 2013 14:46:11 -0700</pubDate><guid>https://the.fringe.ninja/2013/06/23/unlocking-the-key-in-navision-so-we-can-apply-cqrs/</guid><description>The Soap Box Part We&amp;rsquo;ve heard this before, but it bears repeating: CQRS is not just for greenfield event-sourced ddd systems. It can apply to crappy brownfield systems too. It may even have more relevance there.
Let&amp;rsquo;s take the penultimate brownfield system, an ERP system. In particular, Navision. Navision has a fantastic interface for interacting with it (snipped for brevity):
public interface SalesPrice_Port { Read_Result Read(Read request); ReadMultiple_Result ReadMultiple(ReadMultiple request); Create_Result Create(Create request); Update_Result Update(Update request); Delete_Result Delete(Delete request); } In other words, a 100% behavior free SQL-like interface that isn&amp;rsquo;t sql because you have Create / Read instead of INSERT / SELECT.</description></item></channel></rss>